sql.conversation.findUnreadMessageCount=SELECT count(*) as unread_count, cc.conversation_id as convo_id FROM conversation_comment cc \
									JOIN comment ON comment.id = cc.comment_id \
									JOIN user_conversation_activity uca ON uca.conversation_id = cc.conversation_id \
									WHERE cc.conversation_id IN (:convoIds) AND comment.created_date > uca.last_visited \
									AND comment.commenter_id != :userId \
									GROUP BY cc.conversation_id 
									
									
sql.books.filterBookSearchBaseQuery=SELECT b.id as bookId, b.title, b.author, b.thumbnail_url, b.image_url, b.category, b.status, \
							b.barcode, b.data_source, b.created_date, b.description, b.condition, u.id as userId, u.name, u.avatar \
							FROM book b \
							JOIN booktrade_user u ON u.id = b.owner_id \
							WHERE 
							
sql.books.filterBookSearchWithDistanceBaseQuery = WITH book_distance AS( \
												SELECT \
  												bk.id as bookId, bk.title, bk.author, bk.thumbnail_url, bk.image_url, bk.category, bk.status, bk.barcode,	\
  												bk.data_source, bk.created_date, bk.description, bk.condition, u.id as userId, u.name, u.avatar, ( \
    												3959 * acos ( \
      													cos ( radians(:latitude) ) \
      													* cos( radians(u.latitude) ) \
      													* cos( radians(u.longitude) - radians(:longitude) ) \
      													+ sin ( radians(:latitude) ) \
      													* sin( radians( u.latitude ) ) \
    												) \
  												) AS distance \
												FROM book bk JOIN booktrade_user u ON u.id = bk.owner_id) \
												SELECT * from book_distance b WHERE \
												