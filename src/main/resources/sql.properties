sql.conversation.findUnreadMessageCount=SELECT count(*) as unread_count, cc.conversation_id as convo_id FROM conversation_comment cc \
									JOIN comment ON comment.id = cc.comment_id \
									JOIN user_conversation_activity uca ON uca.conversation_id = cc.conversation_id \
									WHERE cc.conversation_id IN (:convoIds) AND comment.created_date > uca.last_visited OR uca.last_visited IS NULL \
									AND comment.commenter_id != :userId \
									GROUP BY cc.conversation_id 
									
									
sql.books.filterBookSearchBaseQuery=SELECT bk.id as bookId, bk.title, bk.author, bk.thumbnail_url, bk.image_url, bk.status, \
									bk.barcode, bk.data_source, bk.created_date as createdDate, bk.description, bk.condition, u.id as userId, u.name, u.avatar \
									FROM book bk \
									JOIN booktrade_user u ON u.id = bk.owner_id \
									JOIN book_category bc ON bc.book_id = bk.id \
									WHERE bk.status = 'AVAILABLE' AND 
									
sql.books.filterBookSearchDistanceBaseQuery = WITH book_distance AS( SELECT bk.id as bookId, bk.title, bk.author, bk.thumbnail_url, \
						bk.image_url, bk.status, bk.barcode, bk.data_source, bk.created_date as createdDate, bk.description, bk.condition, bc.category, \
						u.id as userId, u.name, u.avatar, \
						( 3959 * acos \
						 ( cos ( radians(:latitude) ) \
						 	* cos( radians(u.latitude) ) \
						 	* cos( radians(u.longitude) - radians(:longitude) ) \
						 	+ sin ( radians(:latitude) ) * sin( radians( u.latitude ) ) \
						 	) \
						 ) AS distance, \
                      ROW_NUMBER() OVER (partition by bk.id) as bookCount \
                      FROM book bk JOIN booktrade_user u ON u.id = bk.owner_id \
                      JOIN book_category bc on bc.book_id = bk.id WHERE u.latitude IS NOT NULL AND u.longitude IS NOT NULL \
                      
sql.books.filterBookSearchDistanceBaseQuerySelect = SELECT * FROM book_distance b WHERE b.status = 'AVAILABLE' AND b.bookCount = 1 \

sql.books.findBookCategoriesByBookId = SELECT bc.book_id, bc.category FROM book_category bc WHERE bc.book_id in (:bookIds)
												
sql.books.tearDownBookReferences = delete from comment where comment.book_id = :bookId; \
								   delete from book_category where book_id = :bookId; \
								   delete from book where book.id = :bookId;